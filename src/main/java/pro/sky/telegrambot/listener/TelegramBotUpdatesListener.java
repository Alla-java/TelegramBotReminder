package pro.sky.telegrambot.listener;

import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.UpdatesListener;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.request.SendMessage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import pro.sky.telegrambot.model.NotificationTask;
import pro.sky.telegrambot.service.NotificationTaskService;

import javax.annotation.PostConstruct;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
public class TelegramBotUpdatesListener implements UpdatesListener {

    private Logger logger = LoggerFactory.getLogger(TelegramBotUpdatesListener.class);

    @Autowired
    private TelegramBot telegramBot;
    private final NotificationTaskService notificationTaskService;

    public TelegramBotUpdatesListener(TelegramBot telegramBot, NotificationTaskService notificationTaskService) {
        this.telegramBot = telegramBot;
        this.notificationTaskService = notificationTaskService;
    }

    @PostConstruct
    public void init() {
        telegramBot.setUpdatesListener(this);
    }

    @Override
    public int process(List<Update> updates) {
        updates.forEach(update -> {
            logger.info("Processing update: {}", update);
            //–ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–∏—à–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (update.message() != null && update.message().text() != null) {
                //–ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                String messageText = update.message().text().trim();
                Long chatId = update.message().chat().id();

                if (messageText.equals("/start")) {
                    String welcomeText = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ ü§ñ –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.2025 12:00 –ù–∞–ø–æ–º–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ";
                    telegramBot.execute(new SendMessage(chatId, welcomeText));
                    return;
                }

                //\d –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞: –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è; \s –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞: –ø—Ä–æ–±–µ–ª—ã; (.+) —Ç—Ä–µ—Ç—å—è –≥—Ä—É–ø–ø–∞: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                Pattern pattern = Pattern.compile("(\\d{2}\\.\\d{2}\\.\\d{4}\\s\\d{2}:\\d{2})(\\s+)(.+)");
                Matcher matcher = pattern.matcher(messageText);

                if (matcher.matches()) {
                    String dateTimeString = matcher.group(1);
                    String text = matcher.group(3);

                    try {
                        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
                        LocalDateTime dateTime = LocalDateTime.parse(dateTimeString, formatter);

                        NotificationTask task = new NotificationTask();
                        task.setChatId(chatId);
                        task.setNotificationText(text);
                        task.setNotificationDateTime(dateTime);
                        notificationTaskService.save(task);

                        telegramBot.execute(new SendMessage(chatId, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!"));
                    } catch (DateTimeParseException e) {
                        telegramBot.execute(new SendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π: dd.MM.yyyy HH:mm"));
                    }
                } else {
                    telegramBot.execute(new SendMessage(chatId, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n01.01.2025 12:00 –ù–∞–ø–æ–º–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ"));
                }
            }
        });
        return UpdatesListener.CONFIRMED_UPDATES_ALL;
    }

}
